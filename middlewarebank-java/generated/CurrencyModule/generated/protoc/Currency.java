// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protoc/currencies.proto

package CurrencyModule.generated.protoc;


/**
 * Protobuf enum {@code curr.Currency}
 */
public enum Currency
        implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>THB = 0;</code>
     */
    THB(0),
    /**
     * <code>USD = 1;</code>
     */
    USD(1),
    /**
     * <code>AUD = 2;</code>
     */
    AUD(2),
    /**
     * <code>HKD = 3;</code>
     */
    HKD(3),
    /**
     * <code>CAD = 4;</code>
     */
    CAD(4),
    /**
     * <code>NZD = 5;</code>
     */
    NZD(5),
    /**
     * <code>SGD = 6;</code>
     */
    SGD(6),
    /**
     * <code>XDR = 7;</code>
     */
    XDR(7),
    /**
     * <code>EUR = 8;</code>
     */
    EUR(8),
    /**
     * <code>HUF = 9;</code>
     */
    HUF(9),
    /**
     * <code>CHF = 10;</code>
     */
    CHF(10),
    /**
     * <code>GBP = 11;</code>
     */
    GBP(11),
    /**
     * <code>UAH = 12;</code>
     */
    UAH(12),
    /**
     * <code>JPY = 13;</code>
     */
    JPY(13),
    /**
     * <code>CZK = 14;</code>
     */
    CZK(14),
    /**
     * <code>DKK = 15;</code>
     */
    DKK(15),
    /**
     * <code>ISK = 16;</code>
     */
    ISK(16),
    /**
     * <code>NOK = 17;</code>
     */
    NOK(17),
    /**
     * <code>SEK = 18;</code>
     */
    SEK(18),
    /**
     * <code>HRK = 19;</code>
     */
    HRK(19),
    /**
     * <code>RON = 20;</code>
     */
    RON(20),
    /**
     * <code>BGN = 21;</code>
     */
    BGN(21),
    /**
     * <code>TRY = 22;</code>
     */
    TRY(22),
    /**
     * <code>ILS = 23;</code>
     */
    ILS(23),
    /**
     * <code>CLP = 24;</code>
     */
    CLP(24),
    /**
     * <code>MXN = 25;</code>
     */
    MXN(25),
    /**
     * <code>PHP = 26;</code>
     */
    PHP(26),
    /**
     * <code>ZAR = 27;</code>
     */
    ZAR(27),
    /**
     * <code>BRL = 28;</code>
     */
    BRL(28),
    /**
     * <code>MYR = 29;</code>
     */
    MYR(29),
    /**
     * <code>RUB = 30;</code>
     */
    RUB(30),
    /**
     * <code>IDR = 31;</code>
     */
    IDR(31),
    /**
     * <code>INR = 32;</code>
     */
    INR(32),
    /**
     * <code>KRW = 33;</code>
     */
    KRW(33),
    /**
     * <code>CNY = 34;</code>
     */
    CNY(34),
    UNRECOGNIZED(-1),;

    /**
     * <code>THB = 0;</code>
     */
    public static final int THB_VALUE = 0;
    /**
     * <code>USD = 1;</code>
     */
    public static final int USD_VALUE = 1;
    /**
     * <code>AUD = 2;</code>
     */
    public static final int AUD_VALUE = 2;
    /**
     * <code>HKD = 3;</code>
     */
    public static final int HKD_VALUE = 3;
    /**
     * <code>CAD = 4;</code>
     */
    public static final int CAD_VALUE = 4;
    /**
     * <code>NZD = 5;</code>
     */
    public static final int NZD_VALUE = 5;
    /**
     * <code>SGD = 6;</code>
     */
    public static final int SGD_VALUE = 6;
    /**
     * <code>XDR = 7;</code>
     */
    public static final int XDR_VALUE = 7;
    /**
     * <code>EUR = 8;</code>
     */
    public static final int EUR_VALUE = 8;
    /**
     * <code>HUF = 9;</code>
     */
    public static final int HUF_VALUE = 9;
    /**
     * <code>CHF = 10;</code>
     */
    public static final int CHF_VALUE = 10;
    /**
     * <code>GBP = 11;</code>
     */
    public static final int GBP_VALUE = 11;
    /**
     * <code>UAH = 12;</code>
     */
    public static final int UAH_VALUE = 12;
    /**
     * <code>JPY = 13;</code>
     */
    public static final int JPY_VALUE = 13;
    /**
     * <code>CZK = 14;</code>
     */
    public static final int CZK_VALUE = 14;
    /**
     * <code>DKK = 15;</code>
     */
    public static final int DKK_VALUE = 15;
    /**
     * <code>ISK = 16;</code>
     */
    public static final int ISK_VALUE = 16;
    /**
     * <code>NOK = 17;</code>
     */
    public static final int NOK_VALUE = 17;
    /**
     * <code>SEK = 18;</code>
     */
    public static final int SEK_VALUE = 18;
    /**
     * <code>HRK = 19;</code>
     */
    public static final int HRK_VALUE = 19;
    /**
     * <code>RON = 20;</code>
     */
    public static final int RON_VALUE = 20;
    /**
     * <code>BGN = 21;</code>
     */
    public static final int BGN_VALUE = 21;
    /**
     * <code>TRY = 22;</code>
     */
    public static final int TRY_VALUE = 22;
    /**
     * <code>ILS = 23;</code>
     */
    public static final int ILS_VALUE = 23;
    /**
     * <code>CLP = 24;</code>
     */
    public static final int CLP_VALUE = 24;
    /**
     * <code>MXN = 25;</code>
     */
    public static final int MXN_VALUE = 25;
    /**
     * <code>PHP = 26;</code>
     */
    public static final int PHP_VALUE = 26;
    /**
     * <code>ZAR = 27;</code>
     */
    public static final int ZAR_VALUE = 27;
    /**
     * <code>BRL = 28;</code>
     */
    public static final int BRL_VALUE = 28;
    /**
     * <code>MYR = 29;</code>
     */
    public static final int MYR_VALUE = 29;
    /**
     * <code>RUB = 30;</code>
     */
    public static final int RUB_VALUE = 30;
    /**
     * <code>IDR = 31;</code>
     */
    public static final int IDR_VALUE = 31;
    /**
     * <code>INR = 32;</code>
     */
    public static final int INR_VALUE = 32;
    /**
     * <code>KRW = 33;</code>
     */
    public static final int KRW_VALUE = 33;
    /**
     * <code>CNY = 34;</code>
     */
    public static final int CNY_VALUE = 34;


    public final int getNumber() {
        if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalArgumentException(
                    "Can't get the number of an unknown enum value.");
        }
        return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Currency valueOf(int value) {
        return forNumber(value);
    }

    public static Currency forNumber(int value) {
        switch (value) {
            case 0:
                return THB;
            case 1:
                return USD;
            case 2:
                return AUD;
            case 3:
                return HKD;
            case 4:
                return CAD;
            case 5:
                return NZD;
            case 6:
                return SGD;
            case 7:
                return XDR;
            case 8:
                return EUR;
            case 9:
                return HUF;
            case 10:
                return CHF;
            case 11:
                return GBP;
            case 12:
                return UAH;
            case 13:
                return JPY;
            case 14:
                return CZK;
            case 15:
                return DKK;
            case 16:
                return ISK;
            case 17:
                return NOK;
            case 18:
                return SEK;
            case 19:
                return HRK;
            case 20:
                return RON;
            case 21:
                return BGN;
            case 22:
                return TRY;
            case 23:
                return ILS;
            case 24:
                return CLP;
            case 25:
                return MXN;
            case 26:
                return PHP;
            case 27:
                return ZAR;
            case 28:
                return BRL;
            case 29:
                return MYR;
            case 30:
                return RUB;
            case 31:
                return IDR;
            case 32:
                return INR;
            case 33:
                return KRW;
            case 34:
                return CNY;
            default:
                return null;
        }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Currency>
    internalGetValueMap() {
        return internalValueMap;
    }

    private static final com.google.protobuf.Internal.EnumLiteMap<
            Currency> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Currency>() {
                public Currency findValueByNumber(int number) {
                    return Currency.forNumber(number);
                }
            };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
    getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
    }

    public final com.google.protobuf.Descriptors.EnumDescriptor
    getDescriptorForType() {
        return getDescriptor();
    }

    public static final com.google.protobuf.Descriptors.EnumDescriptor
    getDescriptor() {
        return CurrencyProto.getDescriptor().getEnumTypes().get(0);
    }

    private static final Currency[] VALUES = values();

    public static Currency valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
                    "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
            return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
    }

    private final int value;

    private Currency(int value) {
        this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:curr.Currency)
}

